import { useEffect, useState } from "react";
import CodeSubmitted from "./CodeSubmitted";
import {getSubmissionsByTaskAndUser} from "@/lib/sandbox/sandbox-service"
import Button from "@/components/core/Button.jsx";

export default function StudentPanel({ students = [] }) {
  const [selected, setSelected] = useState(null);
  const [submissionsReviewed, setSubmissionsReviewed] = useState([]);
  const [submissionsNotReviewed, setSubmissionsNotReviewed] = useState([]);
  const [codeHistory, setCodeHistory] = useState([]);
  const [historyIndex, setHistoryIndex] = useState(0);

  useEffect(() => {
    const submissionsReviewed = students.filter(s => s.status === "Revisado");
    const submissionsNotReviewed = students.filter(s => s.status === "Sin revisar" || s.status === "No entregado");
    setSubmissionsReviewed(submissionsReviewed);
    setSubmissionsNotReviewed(submissionsNotReviewed);
  }, [students]);

  useEffect(() => {
    console.log("seleccionado ", selected);
  }, [selected])

  const showMoreCode = async () => {
    const forCodeHistory = await getSubmissionsByTaskAndUser(selected.task_id, selected.user_id);
    setCodeHistory(forCodeHistory);
    setHistoryIndex(0);
    console.log(forCodeHistory);
  }

  return (
    <div className="flex h-screen mb-16">
      <div className="w-64 p-4 border-r-2 border-violet-300 overflow-y-auto">
        <h2 className="font-bold text-violet-700 mb-4">Revisados</h2>
        {submissionsReviewed.map((s) => (
          <div
            key={s.id || s.user_id}
            onClick={() => setSelected(s)}
            className={`cursor-pointer p-2 mb-2 rounded-lg ${selected?.id === s.id || selected?.user_id === s.user_id
                ? "bg-violet-300 text-white"
                : "hover:bg-violet-700"
              }`}
          >
            <div className="flex justify-between">
              <span>{s.name || s.username || "Sin nombre"}</span>
              <span className="font-bold">{s.score ?? "?"}/10</span>
            </div>
            <span className={`text-xs px-2 py-0.5 rounded-full font-semibold ${s.is_autogenerated ? 'bg-red-200 text-red-700' : 'bg-green-200 text-green-700'
              }`}>
              {s.is_autogenerated ? 'No entregado' : 'Entregado'}
            </span>
          </div>
        ))}

        <h2 className="font-bold text-orange-700 mb-4">Sin revisar</h2>
        {submissionsNotReviewed.map((s) => (
          <div
            key={s.id || s.user_id}
            onClick={() => setSelected(s)}
            className={`cursor-pointer p-2 mb-2 rounded-lg ${selected?.id === s.id || selected?.user_id === s.user_id
                ? "bg-violet-950 text-white border border-violet-700"
                : "hover:bg-violet-700"
              }`}
          >
            <div className="flex justify-between">
              <span>{s.name || s.username || "Sin nombre"}</span>
              <span className="font-bold">{s.score ?? "?"}/10</span>
            </div>
            <span className={`text-xs px-2 py-0.5 rounded-full font-semibold ${s.is_autogenerated ? 'bg-red-200 text-red-700' : 'bg-green-200 text-green-700'
              }`}>
              {s.is_autogenerated ? 'No entregado' : 'Entregado'}
            </span>
          </div>
        ))}
      </div>

      <div className="flex-1 p-8">
        {selected ? (
          <div>
            <h2 className="text-2xl font-bold text-orange-600">
              {selected.username}
            </h2>
            <p className="mt-2 text-lg">Calificación: {selected.score}/10</p>
            {/* Aquí pondrás el componente detallado */}
            <div className="flex md:justify-evenly">
              <CodeSubmitted referenceCode={selected.code}/>
              <button onClick={showMoreCode}>Ver historial de entregas</button>
            </div>
            {codeHistory.length > 0 && (
  <div className="w-full max-w-xl mx-auto mt-6 p-4 border rounded-lg bg-gray-50">
    <div className="flex justify-between items-center mb-2">
      <button
        onClick={() => setHistoryIndex(i => Math.max(i - 1, 0))}
        disabled={historyIndex === 0}
        className="px-2 py-1 bg-violet-200 rounded disabled:opacity-50"
      >
        Anterior
      </button>
      <span>
        Entrega {historyIndex + 1} de {codeHistory.length}
      </span>
      <button
        onClick={() => setHistoryIndex(i => Math.min(i + 1, codeHistory.length - 1))}
        disabled={historyIndex === codeHistory.length - 1}
        className="px-2 py-1 bg-violet-200 rounded disabled:opacity-50"
      >
        Siguiente
      </button>
    </div>
    <div>
      <pre className="bg-black text-green-200 p-2 rounded mb-2 overflow-x-auto">
        {codeHistory[historyIndex].code}
      </pre>
      <div className="text-sm text-gray-700">
        <div><b>Fecha:</b> {new Date(codeHistory[historyIndex].submission_date).toLocaleString()}</div>
        <div><b>Resultado:</b> {codeHistory[historyIndex].result}</div>
        <div><b>Calificación:</b> {codeHistory[historyIndex].score ?? "?"}/10</div>
        <div><b>Status:</b> {codeHistory[historyIndex].status}</div>
        <div><b>Username:</b> {codeHistory[historyIndex].username}</div>
      </div>
    </div>
  </div>
)}
            
          </div>
        ) : (
          <div className="text-orange-500 text-xl italic">
            Selecciona un estudiante para ver los detalles ✨
          </div>
        )}
      </div>
    </div>
  );
}
