import { useEffect, useState } from "react";
import CodeSubmitted from "./CodeSubmitted";
import TestFeedback from "./TestFeedback";
import FeedbackCard from "./FeedbackCard";
import { getSubmissionsByTaskAndUser, reviewSubmission } from "@/lib/sandbox/sandbox-service"
import { getFeedbackAI } from "@/lib/users/users-service";
import Input from "@/components/core/Input.jsx";

export default function StudentPanel({ students = [], taskInfo }) {
  const [selected, setSelected] = useState(null);
  const [submissionsReviewed, setSubmissionsReviewed] = useState([]);
  const [submissionsNotReviewed, setSubmissionsNotReviewed] = useState([]);
  const [codeHistory, setCodeHistory] = useState([]);
  const [historyIndex, setHistoryIndex] = useState(0);
  const [scoreEdited, setScoreEdited] = useState("");
  const [selectedSubmission, setSelectedSubmission] = useState(null);
  const [feedbackAI, setFeedbackAI] = useState(null);

  useEffect(() => {
    const submissionsReviewed = students.filter(s => s.status === "Revisado");
    const submissionsNotReviewed = students.filter(s => s.status === "Sin revisar" || s.status === "No entregado");
    setSubmissionsReviewed(submissionsReviewed);
    setSubmissionsNotReviewed(submissionsNotReviewed);
  }, [students]);

  useEffect(() => {
    console.log("seleccionado ", selected);
    if (selected?.score !== undefined && selected?.score !== null) {
      setScoreEdited(selected.score);
    } else {
      setScoreEdited("");
    }
    if (selected) {
      showMoreCode();
    } else {
      setCodeHistory([]);
      setHistoryIndex(0);
    }
  }, [selected])

  useEffect(() => {
    if (codeHistory.length > 0) {
      setSelectedSubmission(codeHistory[historyIndex]);
    } else {
      setSelectedSubmission(null);
    }
  }, [codeHistory, historyIndex]);

  useEffect(() => {
    if (selectedSubmission && selectedSubmission.autofeedback_id) {
      handleFeedbackAI();
    } else {
      setFeedbackAI(null);
    }
    // eslint-disable-next-line
  }, [selectedSubmission]);

  const showMoreCode = async () => {
    const forCodeHistory = await getSubmissionsByTaskAndUser(selected.task_id, selected.user_id);
    setCodeHistory(forCodeHistory);
    setHistoryIndex(0);
    console.log(forCodeHistory);
  }

  const handleReview = async () => {
    if (!selected?.submission_id || scoreEdited === "") return;

    try {
      const updated = await reviewSubmission(selected.submission_id, {
        score: Number(scoreEdited),
        status: "Revisado"
      });
      console.log("Revisión actualizada:", updated);
    } catch (err) {
      console.error("Error al enviar la calificación", err);
    }
  };

  const handleFeedbackAI = async () => {
    try {
      const feedbackAIObtained = await getFeedbackAI(selectedSubmission.autofeedback_id)
      console.log("feedbackAIObtained", feedbackAIObtained);
      setFeedbackAI(feedbackAIObtained)
    } catch (err) {
      console.error("Error al obtener feedback relacionado", err);
    }
  }


  return (
    <div className="flex h-screen mb-16">
      <div className="w-64 p-4 border-r-2 border-violet-300 overflow-y-auto">
        <h2 className="font-bold text-violet-700 mb-4">Revisados</h2>
        {submissionsReviewed.map((s) => (
          <div
            key={s.id || s.user_id}
            onClick={() => setSelected(s)}
            className={`cursor-pointer p-2 mb-2 rounded-lg ${selected?.id === s.id || selected?.user_id === s.user_id
              ? "bg-violet-300 text-white"
              : "hover:bg-violet-700"
              }`}
          >
            <div className="flex justify-between">
              <span>{s.name || s.username || "Sin nombre"}</span>
              <span className="font-bold">{s.score ?? "?"}/{taskInfo}</span>
            </div>
            <span className={`text-xs px-2 py-0.5 rounded-full font-semibold ${s.is_autogenerated ? 'bg-red-200 text-red-700' : 'bg-green-200 text-green-700'
              }`}>
              {s.is_autogenerated ? 'No entregado' : 'Entregado'}
            </span>
          </div>
        ))}

        <h2 className="font-bold text-orange-700 mb-4">Sin revisar</h2>
        {submissionsNotReviewed.map((s) => (
          <div
            key={s.id || s.user_id}
            onClick={() => setSelected(s)}
            className={`cursor-pointer p-2 mb-2 rounded-lg ${selected?.id === s.id || selected?.user_id === s.user_id
              ? "bg-violet-950 text-white border border-violet-700"
              : "hover:bg-violet-700"
              }`}
          >
            <div className="flex justify-between">
              <span>{s.name || s.username || "Sin nombre"}</span>
              <span className="font-bold">{s.score ?? "?"}/{taskInfo}</span>
            </div>
            <span className={`text-xs px-2 py-0.5 rounded-full font-semibold ${s.is_autogenerated ? 'bg-red-200 text-red-700' : 'bg-green-200 text-green-700'
              }`}>
              {s.is_autogenerated ? 'No entregado' : 'Entregado'}
            </span>
          </div>
        ))}
      </div>

      <div className="flex-1 p-8 h-[500px] overflow-y-auto">
        {selected ? (
          <div>
            <h2 className="text-2xl font-semibold text-violet-600">
              {selected.username}
            </h2>
            <div className="mt-2 w-full flex justify-between">
              <div className="text-lg">
                Calificación: {scoreEdited}/{taskInfo}
              </div>
              <div className="text-lg">
                Editar:
                <input
                  type="number"
                  min="0"
                  max={taskInfo}
                  value={scoreEdited}
                  onChange={(e) => {
                    const val = e.target.value;
                    setScoreEdited(val === "" ? "" : Number(val));
                  }}
                  className="m-2 px-2 border rounded max-w-16 bg-transparent border-cyan-400"
                />
                <button onClick={handleReview} className="sm:w-auto px-2 bg-cyan-500 rounded-md hover:bg-cyan-800 hover:text-white">Ok</button>
              </div>

            </div>
            {selectedSubmission !==null && (
              <TestFeedback dataFeedback={selectedSubmission.test_feedback}/>
            )}
            {codeHistory.length > 0 && (
              <div className="w-full max-w-xl mx-auto mt-6 p-4 border rounded-lg bg-transparent">
                <div className="flex justify-between items-center mb-2">
                  <button
                    onClick={() => setHistoryIndex(i => Math.max(i - 1, 0))}
                    disabled={historyIndex === 0}
                    className="px-2 py-1 bg-violet-300 rounded disabled:opacity-50 text-gray-900"
                  >
                    Anterior
                  </button>
                  <span>
                    Entrega {historyIndex + 1} de {codeHistory.length}
                  </span>
                  <button
                    onClick={() => setHistoryIndex(i => Math.min(i + 1, codeHistory.length - 1))}
                    disabled={historyIndex === codeHistory.length - 1}
                    className="px-2 py-1 bg-violet-300 rounded disabled:opacity-50 text-gray-900"
                  >
                    Siguiente
                  </button>
                </div>
                <div>
                  <CodeSubmitted referenceCode={codeHistory[historyIndex].code} />
                  <div className="text-sm text-gray-100 my-2">
                    <div><b>Fecha:</b> {new Date(codeHistory[historyIndex].submission_date).toLocaleString()}</div>
                    <div><b>Resultado:</b> {codeHistory[historyIndex].result}</div>
                    <div><b>Calificación:</b> {codeHistory[historyIndex].score ?? "?"}/{taskInfo}</div>
                    <div><b>Estado:</b> {codeHistory[historyIndex].status}</div>
                    <div><b>Nombre de estudiante:</b> {codeHistory[historyIndex].username}</div>
                  </div>
                </div>
                {feedbackAI && (
                  // <div className="mt-4 p-4 rounded-lg border border-cyan-400 bg-cyan-950/40 text-cyan-100 shadow">
                  //   <h3 className="font-bold text-cyan-300 mb-2">Feedback de la IA</h3>
                  //   <pre className="whitespace-pre-wrap">{feedbackAI.feedback || JSON.stringify(feedbackAI, null, 2)}</pre>
                  // </div>
                  <FeedbackCard selected={feedbackAI}/>
                )}
              </div>
            )}

          </div>
        ) : (
          <div className="text-slate-500 text-lg italic">
            Selecciona un estudiante para ver los detalles ✨
          </div>
        )}
      </div>
    </div>
  );
}
